{
  "source_file_path_relative_to_docusaurus_root": "blog/2020-9-18-chaos-mesh-action-integrate-chaos-engineering-into-your-ci.md",
  "source_file_content_hash": "ec46d3e84df23126b41119cdee2ab35f39ceac21c74db72df5acc50565806214",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nslug: /chaos-mesh-action-integrate-chaos-engineering-into-your-ci\ntitle: 'chaos-mesh-action: Integrate Chaos Engineering into Your CI'\nauthors: xiangwang\nimage: /img/blog/chaos-mesh-action.png\ntags: [Chaos Mesh, Chaos Engineering, GitHub Actions, CI]\n---",
      "source_content_hash": "8b67fa6b6b1adc60e25b1ea51e6e41e81ff01cfe69c7bd024930b0b573c0f751",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "ja": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "53eaf0e1",
      "source_content": "![chaos-mesh-action - Integrate Chaos Engineering into Your CI](/img/blog/chaos-mesh-action.png)",
      "source_content_hash": "d9c780eb8613f16e65a1b9d2d16fa4730a226050a6387023337b5e1fc73e781d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "![chaos-mesh-action - CIへのカオスエンジニアリングの統合](/img/blog/chaos-mesh-action.png)"
      }
    },
    {
      "segment_id": "8ac585fb",
      "source_content": "[Chaos Mesh](https://chaos-mesh.org) is a cloud-native chaos testing platform that orchestrates chaos in Kubernetes environments. While it’s well received in the community with its rich fault injection types and easy-to-use dashboard, it was difficult to use Chaos Mesh with end-to-end testing or the continuous integration (CI) process. As a result, problems introduced during system development could not be discovered before the release.",
      "source_content_hash": "620ba8148fa7fe2257149bbf23d3dac705ec707cc5c6627bcbf0df7851f72f38",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "[Chaos Mesh](https://chaos-mesh.org)は、Kubernetes環境でカオスをオーケストレーションするクラウドネイティブなカオステストプラットフォームです。豊富な障害注入タイプと使いやすいダッシュボードでコミュニティから高い評価を得ていますが、エンドツーエンドテストや継続的インテグレーション（CI）プロセスとの連携が困難でした。そのため、システム開発中に導入された問題がリリース前に発見できないケースがありました。"
      }
    },
    {
      "segment_id": "180bddb1",
      "source_content": "In this article, I will share how we use chaos-mesh-action, a GitHub action to integrate Chaos Mesh into the CI process.",
      "source_content_hash": "8f79af0beca2207e36fb13405162fd181b97ed94ffdadf26865045b6fa4da0cd",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "この記事では、Chaos MeshをCIプロセスに統合するためのGitHubアクションであるchaos-mesh-actionの使用方法を紹介します。"
      }
    },
    {
      "segment_id": "28a64196",
      "source_content": "<!--truncate-->",
      "source_content_hash": "f5cded2aa7e288e395fe4f67f9dabda2281904b2f5358d07302b3aa8be0acdfa",
      "node_type": "comment",
      "translatable": false,
      "translations": {
        "ja": "@@untranslatable_placeholder_28a64196"
      }
    },
    {
      "segment_id": "42ad8e83",
      "source_content": "chaos-mesh-action is available on [GitHub market](https://github.com/marketplace/actions/chaos-mesh), and the source code is on [GitHub](https://github.com/chaos-mesh/chaos-mesh-action).",
      "source_content_hash": "ae37ab6be186fbdb3c607970d9372e895771573e06e49001dcd71deb19c9b938",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "chaos-mesh-actionは[GitHubマーケット](https://github.com/marketplace/actions/chaos-mesh)で利用可能で、ソースコードは[GitHub](https://github.com/chaos-mesh/chaos-mesh-action)に公開されています。"
      }
    },
    {
      "segment_id": "aee0e40d",
      "source_content": "## Design of chaos-mesh-action",
      "source_content_hash": "b5761e3be18617064106703d18cafe341db9bce5ba7d77eb1d8eee9cb4cebd1b",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "ja": "## chaos-mesh-actionの設計"
      }
    },
    {
      "segment_id": "f5f6d2ce",
      "source_content": "[GitHub Actions](https://docs.github.com/en/actions) is a CI/CD feature natively supported by GitHub, through which we can easily build automated and customized software development workflows in the GitHub repository.",
      "source_content_hash": "de6d64308c325a1dba90fbc4d1f9a76eccaa87820cc8bc9412972027cc4bd6f2",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "[GitHub Actions](https://docs.github.com/ja/actions)はGitHubがネイティブにサポートするCI/CD機能で、GitHubリポジトリ内で自動化されたカスタマイズ可能なソフトウェア開発ワークフローを簡単に構築できます。"
      }
    },
    {
      "segment_id": "2fdadb08",
      "source_content": "Combined with GitHub Actions, Chaos Mesh can be more easily integrated into the daily development and testing of the system, thus guaranteeing that each code submission on GitHub is bug-free and won’t damage existing code. The following figure shows chaos-mesh-action integrated into the CI workflow:",
      "source_content_hash": "464a868cef40c81ccb7823656348db8c9d53583afb23a37f3db47608814eba31",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "GitHub Actionsと組み合わせることで、Chaos Meshを日常的な開発やテストに容易に統合でき、GitHub上の各コードコミットがバグフリーで既存のコードを破壊しないことを保証できます。以下の図はCIワークフローに統合されたchaos-mesh-actionを示しています："
      }
    },
    {
      "segment_id": "f2c2bdd0",
      "source_content": "![chaos-mesh-action integration in the CI workflow](/img/blog/chaos-mesh-action-integrate-in-the-ci-workflow.png)",
      "source_content_hash": "4087f44e68258a5a2aad79a8de7099a6803ccaceced2a5df6f8fb18f32fe8f2f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "![CIワークフローに統合されたchaos-mesh-action](/img/blog/chaos-mesh-action-integrate-in-the-ci-workflow.png)"
      }
    },
    {
      "segment_id": "fa430ad4",
      "source_content": "## Using chaos-mesh-action in GitHub workflow",
      "source_content_hash": "ec62504042fe7aed0000cb255e136423e25f1fd05cd5628b96a23bbea585bd24",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "ja": "## GitHubワークフローでのchaos-mesh-actionの使用"
      }
    },
    {
      "segment_id": "4b1d2d7d",
      "source_content": "[chaos-mesh-action](https://github.com/marketplace/actions/chaos-mesh) works in Github workflows. A GitHub workflow is a configurable automated process that you can set up in your repository to build, test, package, release, or deploy any GitHub project. To integrate Chaos Mesh in your CI, do the following:",
      "source_content_hash": "d7d886f0be45e188c907292af65723f80d0f0f589cc7460f0c6c25aaeb9af0f4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "[chaos-mesh-action](https://github.com/marketplace/actions/chaos-mesh)はGitHubワークフローで動作します。GitHubワークフローは、リポジトリ内で設定可能な自動化プロセスで、GitHubプロジェクトのビルド、テスト、パッケージ化、リリース、デプロイを行うことができます。CIにChaos Meshを統合するには、以下の手順に従います："
      }
    },
    {
      "segment_id": "c6dea11f",
      "source_content": "1. Design a workflow.\n2. Create a workflow.\n3. Run the workflow.",
      "source_content_hash": "86bc5cfdb281f5de19f5a1553cceb5b68c83ba1bb3a7d9c08436215d5d057011",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "ja": "1. ワークフローを設計する\n2. ワークフローを作成する\n3. ワークフローを実行する"
      }
    },
    {
      "segment_id": "f422383e",
      "source_content": "### Design a workflow",
      "source_content_hash": "2aaa68a766ba669a2e741feeba6b006f8debf0cc862816de191f1b9c126a15c8",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "ja": "### ワークフローの設計"
      }
    },
    {
      "segment_id": "97ae4a01",
      "source_content": "Before you design a workflow, you must consider the following issues:",
      "source_content_hash": "bbcbd3a15a9c2ce9e87745267586ce6b54624896667528796728155f006f6fe3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "ワークフローを設計する前に、以下の点を考慮する必要があります："
      }
    },
    {
      "segment_id": "33808f76",
      "source_content": "- What functions are we going to test in this workflow?\n- What types of faults will we inject?\n- How do we verify the correctness of the system?",
      "source_content_hash": "230fc9ea9cc72212cd8a1e2ae9337c313c5d5168694b447e605ffecf5d7760f7",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "ja": "- このワークフローでテストする機能は何か？\n- 注入する障害のタイプは何か？\n- システムの正しさをどのように検証するか？"
      }
    },
    {
      "segment_id": "1042b50d",
      "source_content": "As an example, let’s design a simple test workflow that includes the following steps:",
      "source_content_hash": "aa396584a038e50ae394aa5eb6b09b796adeef4e6ead5976ee0ed66e72ba6fd4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "例として、以下のステップを含む簡単なテストワークフローを設計してみましょう："
      }
    },
    {
      "segment_id": "4c077b92",
      "source_content": "1. Create two Pods in a Kubernetes cluster.\n2. Ping one pod from the other.\n3. Use Chaos Mesh to inject network delay chaos and test whether the ping command is affected.",
      "source_content_hash": "853566ff5a35a7814ed894b91478c08218b3aa146a3dafcc9dd9214c2954fdff",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "ja": "1. Kubernetesクラスタ内に2つのPodを作成する\n2. 一方のPodからもう一方のPodにpingを実行する\n3. Chaos Meshを使用してネットワーク遅延カオスを注入し、pingコマンドが影響を受けるかどうかをテストする"
      }
    },
    {
      "segment_id": "6f930b2f",
      "source_content": "### Create the workflow",
      "source_content_hash": "0760ed69a525163e1c8cdb7756067a3e8c169cfcab9943ca4a67176dab6abb0b",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "ja": "### ワークフローの作成"
      }
    },
    {
      "segment_id": "c504c207",
      "source_content": "After you design the workflow, the next step is to create it.",
      "source_content_hash": "d61a4548dbf0c50987d62d37e16d95e01996315f7580e74a4b35df07de35116b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "ワークフローを設計したら、次は作成します。"
      }
    },
    {
      "segment_id": "310e47b7",
      "source_content": "1. Navigate to the GitHub repository that contains the software you want to test.\n2. To start creating a workflow, click **Actions**, and then click the **New workflow** button:",
      "source_content_hash": "5d7f659c6b5961bffe9c4a03061794d76e0816ad5381c4599e808956c23d70c1",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "ja": "1. テスト対象のソフトウェアを含むGitHubリポジトリに移動します\n2. ワークフローの作成を開始するには、**Actions**をクリックし、**New workflow**ボタンをクリックします："
      }
    },
    {
      "segment_id": "b9aaa519",
      "source_content": "![Creating a workflow](/img/blog/creating-a-workflow.png)",
      "source_content_hash": "c0c57e204d81d36f477cb2532e2e0dc3f7a7f3931fcba1b2a3966ee78ed5afd5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "![ワークフローの作成](/img/blog/creating-a-workflow.png)"
      }
    },
    {
      "segment_id": "e536ea0d",
      "source_content": "A workflow is essentially the configuration of jobs that take place sequentially and automatically. Note that the jobs are configured in a single file. For better illustration, we split the script into different job groups as shown below:",
      "source_content_hash": "ba9ca9172c274b0b421187ded4fe3cac9a71e17e2f29ce41c7ba4dd874656efd",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "ワークフローは本質的に、順次的かつ自動的に実行されるジョブの設定です。ジョブは単一のファイルで設定されますが、説明をわかりやすくするため、以下のようにスクリプトを異なるジョブグループに分割しています："
      }
    },
    {
      "segment_id": "a0e887c2",
      "source_content": "- Set the workflow name and trigger rules.\n\n  This job names the workflow \"Chaos.” When the code is pushed to the master branch or a pull request is submitted to the master branch, this workflow is triggered.\n\n  ```yaml\n  name: Chaos\n\n  on:\n    push:\n      branches:\n        - master\n    pull_request:\n      branches:\n        - master\n  ```\n\n- Install the CI-related environment.\n\n  This configuration specifies the operating system (Ubuntu), and that it uses [helm/kind-action](https://github.com/marketplace/actions/kind-cluster) to create a Kind cluster. Then, it outputs related information about the cluster. Finally, it checks out the GitHub repository for the workflow to access.\n\n  ```yaml\n  jobs:\n    build:\n      runs-on: ubuntu-latest\n      steps:\n        - name: Creating kind cluster\n          uses: helm/kind-action@v1.0.0-rc.1\n\n        - name: Print cluster information\n          run: |\n            kubectl config view\n            kubectl cluster-info\n            kubectl get nodes\n            kubectl get pods -n kube-system\n            helm version\n            kubectl version\n\n        - uses: actions/checkout@v2\n  ```\n\n- Deploy the application.\n\n  In our example, this job deploys an application that creates two Kubernetes Pods.\n\n  ```yaml\n  - name: Deploy an application\n       run: |\n         kubectl apply -f https://raw.githubusercontent.com/chaos-mesh/apps/master/ping/busybox-statefulset.yaml\n  ```\n\n- Inject chaos with chaos-mesh-action.\n\n  ```yaml\n  - name: Run chaos mesh action\n      uses: chaos-mesh/chaos-mesh-action@v0.5\n      env:\n        CHAOS_MESH_VERSION: v1.0.0\n        CFG_BASE64: YXBpVmVyc2lvbjogY2hhb3MtbWVzaC5vcmcvdjFhbHBoYTEKa2luZDogTmV0d29ya0NoYW9zCm1ldGFkYXRhOgogIG5hbWU6IG5ldHdvcmstZGVsYXkKICBuYW1lc3BhY2U6IGJ1c3lib3gKc3BlYzoKICBhY3Rpb246IGRlbGF5ICMgdGhlIHNwZWNpZmljIGNoYW9zIGFjdGlvbiB0byBpbmplY3QKICBtb2RlOiBhbGwKICBzZWxlY3RvcjoKICAgIHBvZHM6CiAgICAgIGJ1c3lib3g6CiAgICAgICAgLSBidXN5Ym94LTAKICBkZWxheToKICAgIGxhdGVuY3k6ICIxMG1zIgogIGR1cmF0aW9uOiAiNXMiCiAgc2NoZWR1bGVyOgogICAgY3JvbjogIkBldmVyeSAxMHMiCiAgZGlyZWN0aW9uOiB0bwogIHRhcmdldDoKICAgIHNlbGVjdG9yOgogICAgICBwb2RzOgogICAgICAgIGJ1c3lib3g6CiAgICAgICAgICAtIGJ1c3lib3gtMQogICAgbW9kZTogYWxsCg==\n  ```\n\n  With chaos-mesh-action, the installation of Chaos Mesh and the injection of chaos complete automatically. You simply need to prepare the chaos configuration that you intend to use to get its Base64 representation. Here, we want to inject network delay chaos into the Pods, so we use the original chaos configuration as follows:\n\n  ```yaml\n  apiVersion: chaos-mesh.org/v1alpha1\n  kind: NetworkChaos\n  metadata:\n    name: network-delay\n    namespace: busybox\n  spec:\n    action: delay # the specific chaos action to inject\n    mode: all\n    selector:\n      pods:\n        busybox:\n          - busybox-0\n    delay:\n      latency: '10ms'\n    duration: '5s'\n    scheduler:\n      cron: '@every 10s'\n    direction: to\n    target:\n      selector:\n        pods:\n          busybox:\n            - busybox-1\n      mode: all\n  ```\n\n  You can obtain the Base64 value of the above chaos configuration file using the following command:\n\n  ```shell\n  $ base64 chaos.yaml\n  ```\n\n- Verify the system correctness.\n\n  In this job, the workflow pings one Pod from the other and observes the changes in network delay.\n\n  ```yaml\n  - name: Verify\n       run: |\n         echo \"do some verification\"\n         kubectl exec busybox-0 -it -n busybox -- ping -c 30 busybox-1.busybox.busybox.svc\n  ```",
      "source_content_hash": "4c62f52947ebeffb14fb24067a4906971fa72afdbe02d6b6ba443ca17bf0e683",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "ja": "- ワークフローの名前とトリガールールを設定する。\n\n  このジョブではワークフローに「Chaos」という名前を付けています。コードがmasterブランチにプッシュされたとき、またはmasterブランチへのプルリクエストが作成されたときに、このワークフローがトリガーされます。\n\n  ```yaml\n  name: Chaos\n\n  on:\n    push:\n      branches:\n        - master\n    pull_request:\n      branches:\n        - master\n  ```\n\n- CI関連の環境をセットアップする。\n\n  この設定では、オペレーティングシステム（Ubuntu）を指定し、[helm/kind-action](https://github.com/marketplace/actions/kind-cluster)を使用してKindクラスターを作成します。その後、クラスターに関する関連情報を出力し、最後にワークフローがアクセスするためのGitHubリポジトリをチェックアウトします。\n\n  ```yaml\n  jobs:\n    build:\n      runs-on: ubuntu-latest\n      steps:\n        - name: Creating kind cluster\n          uses: helm/kind-action@v1.0.0-rc.1\n\n        - name: Print cluster information\n          run: |\n            kubectl config view\n            kubectl cluster-info\n            kubectl get nodes\n            kubectl get pods -n kube-system\n            helm version\n            kubectl version\n\n        - uses: actions/checkout@v2\n  ```\n\n- アプリケーションをデプロイする。\n\n  この例では、2つのKubernetes Podを作成するアプリケーションをデプロイします。\n\n  ```yaml\n  - name: Deploy an application\n       run: |\n         kubectl apply -f https://raw.githubusercontent.com/chaos-mesh/apps/master/ping/busybox-statefulset.yaml\n  ```\n\n- chaos-mesh-actionを使用してカオスを注入する。\n\n  ```yaml\n  - name: Run chaos mesh action\n      uses: chaos-mesh/chaos-mesh-action@v0.5\n      env:\n        CHAOS_MESH_VERSION: v1.0.0\n        CFG_BASE64: YXBpVmVyc2lvbjogY2hhb3MtbWVzaC5vcmcvdjFhbHBoYTEKa2luZDogTmV0d29ya0NoYW9zCm1ldGFkYXRhOgogIG5hbWU6IG5ldHdvcmstZGVsYXkKICBuYW1lc3BhY2U6IGJ1c3lib3gKc3BlYzoKICBhY3Rpb246IGRlbGF5ICMgdGhlIHNwZWNpZmljIGNoYW9zIGFjdGlvbiB0byBpbmplY3QKICBtb2RlOiBhbGwKICBzZWxlY3RvcjoKICAgIHBvZHM6CiAgICAgIGJ1c3lib3g6CiAgICAgICAgLSBidXN5Ym94LTAKICBkZWxheToKICAgIGxhdGVuY3k6ICIxMG1zIgogIGR1cmF0aW9uOiAiNXMiCiAgc2NoZWR1bGVyOgogICAgY3JvbjogIkBldmVyeSAxMHMiCiAgZGlyZWN0aW9uOiB0bwogIHRhcmdldDoKICAgIHNlbGVjdG9yOgogICAgICBwb2RzOgogICAgICAgIGJ1c3lib3g6CiAgICAgICAgICAtIGJ1c3lib3gtMQogICAgbW9kZTogYWxsCg==\n  ```\n\n  chaos-mesh-actionを使用すると、Chaos Meshのインストールとカオスの注入が自動的に完了します。必要なのは、使用するカオス設定を準備し、そのBase64表現を取得することだけです。ここでは、Podにネットワーク遅延カオスを注入したいため、以下のような元のカオス設定を使用します：\n\n  ```yaml\n  apiVersion: chaos-mesh.org/v1alpha1\n  kind: NetworkChaos\n  metadata:\n    name: network-delay\n    namespace: busybox\n  spec:\n    action: delay # 注入する具体的なカオスアクション\n    mode: all\n    selector:\n      pods:\n        busybox:\n          - busybox-0\n    delay:\n      latency: '10ms'\n    duration: '5s'\n    scheduler:\n      cron: '@every 10s'\n    direction: to\n    target:\n      selector:\n        pods:\n          busybox:\n            - busybox-1\n      mode: all\n  ```\n\n  上記のカオス設定ファイルのBase64値は、以下のコマンドで取得できます：\n\n  ```shell\n  $ base64 chaos.yaml\n  ```\n\n- システムの正しさを検証する。\n\n  このジョブでは、ワークフローが一方のPodからもう一方のPodにpingを実行し、ネットワーク遅延の変化を観察します。\n\n  ```yaml\n  - name: Verify\n       run: |\n         echo \"do some verification\"\n         kubectl exec busybox-0 -it -n busybox -- ping -c 30 busybox-1.busybox.busybox.svc\n  ```"
      }
    },
    {
      "segment_id": "a5905b07",
      "source_content": "### Run the workflow",
      "source_content_hash": "ab1ed55dd16a77bca6ea293543440aa29f81276f590c89e54504683f62a5bcd4",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "ja": "### ワークフローの実行"
      }
    },
    {
      "segment_id": "fd7ed056",
      "source_content": "Now that the workflow is configured, we can trigger it by submitting a pull request to the master branch. When the workflow completes, the verification job outputs of the results that look similar to the following:",
      "source_content_hash": "e0caff4883393f836db44a2e2ee68da86cdf3da8eb6cb8fca7e723e10af25398",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "ワークフローの設定が完了したので、masterブランチにプルリクエストを送信することでトリガーできます。ワークフローが完了すると、検証ジョブによって以下のような結果が出力されます。"
      }
    },
    {
      "segment_id": "dddc2d3c",
      "source_content": "```shell\ndo some verification\nUnable to use a TTY - input is not a terminal or the right kind of file\nPING busybox-1.busybox.busybox.svc (10.244.0.6): 56 data bytes\n64 bytes from 10.244.0.6: seq=0 ttl=63 time=0.069 ms\n64 bytes from 10.244.0.6: seq=1 ttl=63 time=10.136 ms\n64 bytes from 10.244.0.6: seq=2 ttl=63 time=10.192 ms\n64 bytes from 10.244.0.6: seq=3 ttl=63 time=10.129 ms\n64 bytes from 10.244.0.6: seq=4 ttl=63 time=10.120 ms\n64 bytes from 10.244.0.6: seq=5 ttl=63 time=0.070 ms\n64 bytes from 10.244.0.6: seq=6 ttl=63 time=0.073 ms\n64 bytes from 10.244.0.6: seq=7 ttl=63 time=0.111 ms\n64 bytes from 10.244.0.6: seq=8 ttl=63 time=0.070 ms\n64 bytes from 10.244.0.6: seq=9 ttl=63 time=0.077 ms\n……\n```",
      "source_content_hash": "1566258aab7edc635bab8f4a865e6e3731630b0b6e3ed086e77bea549c8dac29",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "ja": "@@untranslatable_placeholder_dddc2d3c"
      }
    },
    {
      "segment_id": "4e2e17c5",
      "source_content": "The output indicates a regular series of 10-millisecond delays that last about 5 seconds each. This is consistent with the chaos configuration we injected into chaos-mesh-action.",
      "source_content_hash": "f1bf56be5539d9f2a49207b3563c190e91ba95707a8799de58e42fce76e298e5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "出力結果から、約5秒間隔で10ミリ秒の遅延が規則的に発生していることがわかります。これはchaos-mesh-actionに注入したカオス設定と一致しています。"
      }
    },
    {
      "segment_id": "cce332f2",
      "source_content": "## Current status and next steps",
      "source_content_hash": "732a20bdc47d8068586f5dac897cfd0e88a4899df55425b113d720c3412947fd",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "ja": "## 現在の状況と次のステップ"
      }
    },
    {
      "segment_id": "9ebd9d9b",
      "source_content": "At present, we have applied chaos-mesh-action to the [TiDB Operator](https://github.com/pingcap/tidb-operator) project. The workflow is injected with the Pod chaos to verify the restart function of the specified instances of the operator. The purpose is to ensure that tidb-operator can work normally when the pods of the operator are randomly deleted by the injected faults. You can view the [TiDB Operator page](https://github.com/pingcap/tidb-operator/actions?query=workflow%3Achaos) for more details.",
      "source_content_hash": "12ccb398bd0c8f697a1308178ccd1edf7f329d2cf0c1f419ae328fd711e843cf",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "現在、私たちはchaos-mesh-actionを[TiDB Operator](https://github.com/pingcap/tidb-operator)プロジェクトに適用しています。このワークフローでは、Podカオスを注入してオペレーターの指定インスタンスの再起動機能を検証しています。目的は、tidb-operatorがオペレーターのPodが注入された障害によってランダムに削除された場合でも正常に動作することを保証することです。詳細については[TiDB Operatorページ](https://github.com/pingcap/tidb-operator/actions?query=workflow%3Achaos)をご覧ください。"
      }
    },
    {
      "segment_id": "295367fa",
      "source_content": "In the future, we plan to apply chaos-mesh-action to more tests to ensure the stability of TiDB and related components. You are welcome to create your own workflow using chaos-mesh-action.",
      "source_content_hash": "aad83367ec6f2983b21f37360be223978c137a2865a61bfa72eae1b6c4941ebd",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "将来的には、chaos-mesh-actionをより多くのテストに適用し、TiDBと関連コンポーネントの安定性を確保する予定です。皆さんもchaos-mesh-actionを使用して独自のワークフローを作成することを歓迎します。"
      }
    },
    {
      "segment_id": "6fad5db5",
      "source_content": "If you find a bug or think something is missing, feel free to file an issue, open a pull request (PR), or join us on the [#project-chaos-mesh](https://slack.cncf.io/) channel in the [CNCF](https://www.cncf.io/) slack workspace.",
      "source_content_hash": "5e5b2d9861d2cdd5947a3448f40b3156ff35f1f731a760ed01428df0852f947e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "バグを発見したり、何か不足していると思われる場合は、遠慮なくissueを登録したり、プルリクエスト(PR)を開いたり、[CNCF](https://www.cncf.io/)のSlackワークスペースにある[#project-chaos-mesh](https://slack.cncf.io/)チャンネルで私たちに参加してください。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-blog/2020-9-18-chaos-mesh-action-integrate-chaos-engineering-into-your-ci.md",
  "last_updated_timestamp": "2025-06-05T17:50:36.648384+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "ja": "ec46d3e84df23126b41119cdee2ab35f39ceac21c74db72df5acc50565806214"
  }
}
{
  "source_file_path_relative_to_docusaurus_root": "docs/integrate-chaos-mesh-into-github-actions.md",
  "source_file_content_hash": "6006040d1a814d5e6d8c55f53db0d22b5529085c4622f8d39ec58e4d263f1015",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\ntitle: Integrate Chaos Mesh to GitHub Actions\n---",
      "source_content_hash": "067c3340f9c01be31d9c79d545eb56c88ceab227682d4c251fbbd8de1b6fdd9f",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "ja": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "e7ec8f99",
      "source_content": "This document describes how to integrate Chaos Mesh to customize the continuous integration (CI) using chaos-mesh-action. This helps you identify issues that have been introduced into system development before product releases.",
      "source_content_hash": "e4e1c8e7ee36923077f8d88886064466d1a1356cbbda69a7607b93e562083810",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "このドキュメントでは、Chaos Meshを統合してchaos-mesh-actionを使用して継続的インテグレーション（CI）をカスタマイズする方法について説明します。これにより、製品リリース前にシステム開発に導入された問題を特定するのに役立ちます。"
      }
    },
    {
      "segment_id": "6ef78e84",
      "source_content": "chaos-mesh-action is a GitHub action that has been released on [GitHub Marketplace](https://github.com/marketplace/actions/chaos-mesh). Its source code is on [GitHub](https://github.com/chaos-mesh/chaos-mesh-action) as well.",
      "source_content_hash": "d1c041c95a47ac7bc49c01e4184cf2a54c799b1da73171c643053e994d68ad18",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "chaos-mesh-actionは、[GitHub Marketplace](https://github.com/marketplace/actions/chaos-mesh)でリリースされているGitHubアクションです。そのソースコードも[GitHub](https://github.com/chaos-mesh/chaos-mesh-action)で公開されています。"
      }
    },
    {
      "segment_id": "d912d376",
      "source_content": "## Design of chaos-mesh-action",
      "source_content_hash": "b5761e3be18617064106703d18cafe341db9bce5ba7d77eb1d8eee9cb4cebd1b",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "ja": "## chaos-mesh-actionの設計"
      }
    },
    {
      "segment_id": "8ac585fb",
      "source_content": "[GitHub Action](https://docs.github.com/en/actions) is the continuous integration (CI) and continuous deployment (CD) feature natively supported by GitHub. Using GitHub Action, you can easily automate and customize software development workflows right in your repository with GitHub Actions.",
      "source_content_hash": "dd22087b3c160123b439169c45005461ee250bff7ae7299b67bc68ac41f0f218",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "[GitHub Action](https://docs.github.com/en/actions)は、GitHubがネイティブでサポートする継続的インテグレーション（CI）および継続的デプロイメント（CD）機能です。GitHub Actionを使用すると、リポジトリ内でソフトウェア開発ワークフローを自動化およびカスタマイズできます。"
      }
    },
    {
      "segment_id": "180bddb1",
      "source_content": "Equipped with GitHub Action, Chaos Mesh can be easily integrated into your daily development and tests, which ensures that all code submitted on GitHub is bug-free (to pass tests at least) without affecting the current logic. The image below shows chaos-mesh-action integrated into the CI workflow:",
      "source_content_hash": "6a47d78f31fd8092f30f565b0d62ecf39188ba41a58f9621b5b0ada78c38c37c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "GitHub Actionを備えたChaos Meshは、日常の開発とテストに簡単に統合でき、GitHubに提出されたすべてのコードが（少なくともテストを通過するように）バグフリーであることを保証します。以下の画像は、CIワークフローに統合されたchaos-mesh-actionを示しています："
      }
    },
    {
      "segment_id": "cf898102",
      "source_content": "![chaos-mesh-action-integrate-in-the-ci-workflow](./img/chaos-mesh-action-integrate-in-the-ci-workflow.png)",
      "source_content_hash": "0ea5240508269a266fdbe5e890e0cae6679b6b7827c3567b438b5794ad2c6da7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "![chaos-mesh-action-integrate-in-the-ci-workflow](./img/chaos-mesh-action-integrate-in-the-ci-workflow.png)"
      }
    },
    {
      "segment_id": "3daf1b88",
      "source_content": "## Use chaos-mesh-action in GitHub workflow",
      "source_content_hash": "b558e01dd50f22d65a540923e6274241e8821af1b80bd434aa1962bb2c2411ec",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "ja": "## GitHubワークフローでのchaos-mesh-actionの使用"
      }
    },
    {
      "segment_id": "f6168993",
      "source_content": "chaos-mesh-action works for GitHub workflow. GitHub workflow is a configurable automated process. You can set up GitHub workflows in your repository to build, test, pack, publish or deploy any GitHub project. To integrate Chaos Mesh into your CI, take the following process:",
      "source_content_hash": "891bcc2f71121d138efeef1a6f004d556528e453f55e682c28690243be4ec655",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "chaos-mesh-actionはGitHubワークフローで動作します。GitHubワークフローは設定可能な自動化プロセスです。リポジトリにGitHubワークフローを設定して、GitHubプロジェクトのビルド、テスト、パッケージ化、公開、またはデプロイを行うことができます。CIにChaos Meshを統合するには、以下の手順を実行します："
      }
    },
    {
      "segment_id": "0787cf7f",
      "source_content": "- Step 1: Design workflow\n- Step 2: Create workflow\n- Step 3: Run workflow",
      "source_content_hash": "61b7da588ec7388fe8f4f7c354e2c9c79eb57a3e9ce85cf357c3f37b88fad611",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "ja": "- ステップ1: ワークフローの設計\n- ステップ2: ワークフローの作成\n- ステップ3: ワークフローの実行"
      }
    },
    {
      "segment_id": "ed7dde9c",
      "source_content": "### Step 1: Design workflow",
      "source_content_hash": "ba53f4971bfb25a81dd844f6e28de2acfc518d3928957070c2f1ef8594c2ecc6",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "ja": "### ステップ1: ワークフローの設計"
      }
    },
    {
      "segment_id": "a76548f8",
      "source_content": "Before designing a workflow, take the following questions into consideration:",
      "source_content_hash": "99a6447df004ee6467b4bfe50b9821fd54c74f76b4dffe059c61caed379c42b5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "ワークフローを設計する前に、以下の質問を考慮してください："
      }
    },
    {
      "segment_id": "77bf3ec9",
      "source_content": "- What features do you want to test in this workflow?\n- What type of fault will be injected?\n- How to verify the correctness of the system?",
      "source_content_hash": "be180f762831108d781ae520eff4a5afb6f1c7bf4b532d1a7729e838c8dfaaec",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "ja": "- このワークフローでテストしたい機能は何ですか？\n- 注入する障害のタイプは何ですか？\n- システムの正しさをどのように検証しますか？"
      }
    },
    {
      "segment_id": "4daf5cdd",
      "source_content": "For example, we can design a simple workflow for tests. The steps below can be included:",
      "source_content_hash": "566fe3853bc2eaef00c5efc88245e04412384639fd903c7d330a5a4e65c29e5e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "例えば、テスト用の簡単なワークフローを設計できます。以下のステップを含めることができます："
      }
    },
    {
      "segment_id": "fc8eadc3",
      "source_content": "1. Create two Pods in the Kubernetes cluster.\n2. Send ping request from one Pod to another Pod.\n3. Use Chaos Mesh to inject the network latency fault to test whether the ping command is affected.",
      "source_content_hash": "022186f207df78e03e4a070d85615b4d0b7481d1e2a7a3fd85ec4b4266ccf25d",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "ja": "1. Kubernetesクラスター内に2つのPodを作成します。\n2. 1つのPodから別のPodにpingリクエストを送信します。\n3. Chaos Meshを使用してネットワーク遅延障害を注入し、pingコマンドが影響を受けるかどうかをテストします。"
      }
    },
    {
      "segment_id": "62a6890b",
      "source_content": "### Step 2: Create workflow",
      "source_content_hash": "f9bf2efe38d076d437418246c47d02e20f075bc2ddc46e19a5b96f28ee4f4b90",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "ja": "### ステップ2: ワークフローの作成"
      }
    },
    {
      "segment_id": "3cfe6286",
      "source_content": "After the workflow is designed, take the following steps to create a workflow.",
      "source_content_hash": "9aa955364d8a4ca2c7a44b07c6002e115e5a29d2a20f2c54a5b8193b002b5c68",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "ワークフローが設計されたら、以下の手順でワークフローを作成します。"
      }
    },
    {
      "segment_id": "bdfae007",
      "source_content": "1. Enter the GitHub repository of the software to be tested.\n2. Create a workflow by clicking `Actions` and then click `New workflow`.",
      "source_content_hash": "d3961f08f9be64a0a1f5a13cba85531226e3f3eedaa2b267f187784c5de226f4",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "ja": "1. テスト対象のソフトウェアのGitHubリポジトリに入ります。\n2. `Actions`をクリックし、`New workflow`をクリックしてワークフローを作成します。"
      }
    },
    {
      "segment_id": "8af76f3d",
      "source_content": "![creating-a-workflow](./img/creating-a-workflow.png)",
      "source_content_hash": "2697abfd9c82f7a23cdbe7bbe80521f6a104d2dc22f36e81748281bb60f2f9db",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "![creating-a-workflow](./img/creating-a-workflow.png)"
      }
    },
    {
      "segment_id": "a9d49f92",
      "source_content": "In essence, workflow is a sequentially automated job configuration. Note that the following job is configured in a single file. To provide a clear explanation, the script is split into different working groups, as shown below in:",
      "source_content_hash": "eb7c959ce538d83a0a55890e07893de8c4fde83690c59e80069cf5fc520d8335",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "本質的に、ワークフローは順次自動化されたジョブ設定です。以下のジョブは単一のファイルで設定されています。明確な説明のために、スクリプトは以下のように異なる作業グループに分割されています："
      }
    },
    {
      "segment_id": "40251870",
      "source_content": "- Set the workflow name and the trigger rules.\n\n  Name the workflow to \"Chaos\". When you commit code or create a pull request to a master branch, this workflow is triggered.\n\n  ```yaml\n  name: Chaos\n\n  on:\n    push:\n      branches:\n        - master\n    pull_request:\n      branches:\n        - master\n  ```\n\n- Install the CI-related environment.\n\n  This configuration specifies the operating system (Ubuntu) and creates a Kind cluster using helm/kind-action. After that, it prints the cluster information. Finally, it checks out the GitHub repository that the workflow is to access.\n\n  ```yaml\n  jobs:\n    build:\n      runs-on: ubuntu-latest\n      steps:\n        - name: Creating kind cluster\n          uses: helm/kind-action@v1.0.0-rc.1\n\n        - name: Print cluster information\n          run: |\n            kubectl config view\n            kubectl cluster-info\n            kubectl get nodes\n            kubectl get pods -n kube-system\n            helm version\n            kubectl version\n\n        - uses: actions/checkout@v2\n  ```\n\n- Deploy an application.\n\n  In the following example, this job deploys an application that creates two Kubernetes Pods.\n\n  ```yaml\n  - name: Deploy an application\n       run: |\n         kubectl apply -f https://raw.githubusercontent.com/chaos-mesh/apps/master/ping/busybox-statefulset.yaml\n  ```\n\n- Inject faults using Chaos Mesh.\n\n  ```yaml\n  - name: Run chaos mesh action\n      uses: chaos-mesh/chaos-mesh-action@v0.5\n      env:\n        CHAOS_MESH_VERSION: v1.0.0\n        CFG_BASE64: YXBpVmVyc2lvbjogY2hhb3MtbWVzaC5vcmcvdjFhbHBoYTEKa2luZDogTmV0d29ya0NoYW9zCm1ldGFkYXRhOgogIG5hbWU6IG5ldHdvcmstZGVsYXkKICBuYW1lc3BhY2U6IGJ1c3lib3gKc3BlYzoKICBhY3Rpb246IGRlbGF5ICMgdGhlIHNwZWNpZmljIGNoYW9zIGFjdGlvbiB0byBpbmplY3QKICBtb2RlOiBhbGwKICBzZWxlY3RvcjoKICAgIHBvZHM6CiAgICAgIGJ1c3lib3g6CiAgICAgICAgLSBidXN5Ym94LTAKICBkZWxheToKICAgIGxhdGVuY3k6ICIxMG1zIgogIGR1cmF0aW9uOiAiNXMiCiAgc2NoZWR1bGVyOgogICAgY3JvbjogIkBldmVyeSAxMHMiCiAgZGlyZWN0aW9uOiB0bwogIHRhcmdldDoKICAgIHNlbGVjdG9yOgogICAgICBwb2RzOgogICAgICAgIGJ1c3lib3g6CiAgICAgICAgICAtIGJ1c3lib3gtMQogICAgbW9kZTogYWxsCg==\n  ```\n\n  Using chaos-mesh-action, Chaos Mesh is be installed and injects faults automatically. You only need to prepare the configuration of the chaos experiment and get its value encoded in base64. If you want to inject network latency to the Pod, you can use the following configuration example:\n\n  ```yaml\n  apiVersion: chaos-mesh.org/v1alpha1\n  kind: NetworkChaos\n  metadata:\n    name: network-delay\n    namespace: busybox\n  spec:\n    action: delay # the specific chaos action to inject\n    mode: all\n    selector:\n      pods:\n        busybox:\n          - busybox-0\n    delay:\n      latency: '10ms'\n    duration: '5s'\n    scheduler:\n      cron: '@every 10s'\n    direction: to\n    target:\n      selector:\n        pods:\n          busybox:\n            - busybox-1\n      mode: all\n  ```\n\n  Get the base64-encoded value of the chaos experiment configuration file above using the command below:\n\n  ```bash\n  base64 chaos.yaml\n  ```\n\n- Verify the correctness of the system.\n\n  In this job, the workflow sends ping requests from one Pod to another Pod and observes the network latency.\n\n  ```yaml\n  - name: Verify\n       run: |\n         echo \"do some verification\"\n         kubectl exec busybox-0 -it -n busybox -- ping -c 30 busybox-1.busybox.busybox.svc\n  ```",
      "source_content_hash": "04be8c53a6d1c37b6d37a8ddb9b0484b787e2b13f2f262037f8cd574ba44cfa9",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "ja": "- ワークフローの名前とトリガールールを設定します。\n\n  ワークフローに「Chaos」という名前を付けます。コードをコミットするか、マスターブランチにプルリクエストを作成すると、このワークフローがトリガーされます。\n\n  ```yaml\n  name: Chaos\n\n  on:\n    push:\n      branches:\n        - master\n    pull_request:\n      branches:\n        - master\n  ```\n\n- CI関連の環境をセットアップします。\n\n  この設定では、オペレーティングシステム（Ubuntu）を指定し、helm/kind-actionを使用してKindクラスタを作成します。その後、クラスタ情報を表示します。最後に、ワークフローがアクセスするGitHubリポジトリをチェックアウトします。\n\n  ```yaml\n  jobs:\n    build:\n      runs-on: ubuntu-latest\n      steps:\n        - name: Creating kind cluster\n          uses: helm/kind-action@v1.0.0-rc.1\n\n        - name: Print cluster information\n          run: |\n            kubectl config view\n            kubectl cluster-info\n            kubectl get nodes\n            kubectl get pods -n kube-system\n            helm version\n            kubectl version\n\n        - uses: actions/checkout@v2\n  ```\n\n- アプリケーションをデプロイします。\n\n  以下の例では、このジョブは2つのKubernetes Podを作成するアプリケーションをデプロイします。\n\n  ```yaml\n  - name: Deploy an application\n       run: |\n         kubectl apply -f https://raw.githubusercontent.com/chaos-mesh/apps/master/ping/busybox-statefulset.yaml\n  ```\n\n- Chaos Meshを使用して障害を注入します。\n\n  ```yaml\n  - name: Run chaos mesh action\n      uses: chaos-mesh/chaos-mesh-action@v0.5\n      env:\n        CHAOS_MESH_VERSION: v1.0.0\n        CFG_BASE64: YXBpVmVyc2lvbjogY2hhb3MtbWVzaC5vcmcvdjFhbHBoYTEKa2luZDogTmV0d29ya0NoYW9zCm1ldGFkYXRhOgogIG5hbWU6IG5ldHdvcmstZGVsYXkKICBuYW1lc3BhY2U6IGJ1c3lib3gKc3BlYzoKICBhY3Rpb246IGRlbGF5ICMgdGhlIHNwZWNpZmljIGNoYW9zIGFjdGlvbiB0byBpbmplY3QKICBtb2RlOiBhbGwKICBzZWxlY3RvcjoKICAgIHBvZHM6CiAgICAgIGJ1c3lib3g6CiAgICAgICAgLSBidXN5Ym94LTAKICBkZWxheToKICAgIGxhdGVuY3k6ICIxMG1zIgogIGR1cmF0aW9uOiAiNXMiCiAgc2NoZWR1bGVyOgogICAgY3JvbjogIkBldmVyeSAxMHMiCiAgZGlyZWN0aW9uOiB0bwogIHRhcmdldDoKICAgIHNlbGVjdG9yOgogICAgICBwb2RzOgogICAgICAgIGJ1c3lib3g6CiAgICAgICAgICAtIGJ1c3lib3gtMQogICAgbW9kZTogYWxsCg==\n  ```\n\n  chaos-mesh-actionを使用すると、Chaos Meshが自動的にインストールされ、障害が注入されます。Chaos実験の設定を準備し、その値をbase64でエンコードするだけで済みます。Podにネットワーク遅延を注入したい場合は、以下の設定例を使用できます:\n\n  ```yaml\n  apiVersion: chaos-mesh.org/v1alpha1\n  kind: NetworkChaos\n  metadata:\n    name: network-delay\n    namespace: busybox\n  spec:\n    action: delay # 注入する具体的なChaosアクション\n    mode: all\n    selector:\n      pods:\n        busybox:\n          - busybox-0\n    delay:\n      latency: '10ms'\n    duration: '5s'\n    scheduler:\n      cron: '@every 10s'\n    direction: to\n    target:\n      selector:\n        pods:\n          busybox:\n            - busybox-1\n      mode: all\n  ```\n\n  上記のChaos実験設定ファイルのbase64エンコードされた値を取得するには、以下のコマンドを使用します:\n\n  ```bash\n  base64 chaos.yaml\n  ```\n\n- システムの正しさを検証します。\n\n  このジョブでは、ワークフローは1つのPodから別のPodにpingリクエストを送信し、ネットワーク遅延を観察します。\n\n  ```yaml\n  - name: Verify\n       run: |\n         echo \"do some verification\"\n         kubectl exec busybox-0 -it -n busybox -- ping -c 30 busybox-1.busybox.busybox.svc\n  ```"
      }
    },
    {
      "segment_id": "2f2d5f01",
      "source_content": "### Step 3: Run workflow",
      "source_content_hash": "355a0d02774cc2d9387c765457b76732036b76b4c125903a6b95b598deea7293",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "ja": "### ステップ3: ワークフローの実行"
      }
    },
    {
      "segment_id": "44285072",
      "source_content": "Once a workflow is created, you can trigger it by creating a pull request to a master branch. Once the workflow completes its running process, the output of the job verification is similar to the one below:",
      "source_content_hash": "36227f98b8098a5c231a5671ca405d1fefdd8d932efedd4a02afcb125f679dfb",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "ワークフローを作成したら、masterブランチへのプルリクエストを作成することでトリガーできます。ワークフローの実行が完了すると、ジョブの検証結果は以下のような出力になります:"
      }
    },
    {
      "segment_id": "5680b15c",
      "source_content": "```log\ndo some verification\nUnable to use a TTY - input is not a terminal or the right kind of file\nPING busybox-1.busybox.busybox.svc (10.244.0.6): 56 data bytes\n64 bytes from 10.244.0.6: seq=0 ttl=63 time=0.069 ms\n64 bytes from 10.244.0.6: seq=1 ttl=63 time=10.136 ms\n64 bytes from 10.244.0.6: seq=2 ttl=63 time=10.192 ms\n64 bytes from 10.244.0.6: seq=3 ttl=63 time=10.129 ms\n64 bytes from 10.244.0.6: seq=4 ttl=63 time=10.120 ms\n64 bytes from 10.244.0.6: seq=5 ttl=63 time=0.070 ms\n64 bytes from 10.244.0.6: seq=6 ttl=63 time=0.073 ms\n64 bytes from 10.244.0.6: seq=7 ttl=63 time=0.111 ms\n64 bytes from 10.244.0.6: seq=8 ttl=63 time=0.070 ms\n64 bytes from 10.244.0.6: seq=9 ttl=63 time=0.077 ms\n……\n```",
      "source_content_hash": "382390188defdf4be909acfe20309ffbdd4562dac708b81416d95ba8e8520ddd",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "ja": "@@untranslatable_placeholder_5680b15c"
      }
    },
    {
      "segment_id": "808b0414",
      "source_content": "The output shows a series of 10-milliseconds delays, and each delay lasts for 5 seconds (which is 5 times). This is consistent with the configuration of chaos experiments that are injected using chaos-mesh-action.",
      "source_content_hash": "447c219d786b93fac82e6fad07b6fc919a64100f38246b833e65b0a243d64d6f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "出力には10ミリ秒の遅延が一連で表示され、各遅延は5秒間（5回）継続します。これはchaos-mesh-actionを使用して注入されたカオス実験の設定と一致しています。"
      }
    },
    {
      "segment_id": "a75f8411",
      "source_content": "## What's next",
      "source_content_hash": "b90b110a9bc5f59f5e449a7d3c27a1c9cadb64466dc9e6c207bf6764ac41a4a2",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "ja": "## 次のステップ"
      }
    },
    {
      "segment_id": "39c48ff7",
      "source_content": "Currently, chaos-mesh-action has been applied in [TiDB Operator](https://github.com/pingcap/tidb-operator). By injecting Pod faults into the workflow, you can verify the restart of the Operator instances. This is to ensure that the TiDB Operator can work properly when a Pod of TiDB operator is randomly deleted by the injected fault. For details, see the [TiDB Operator Workflow page](https://github.com/pingcap/tidb-operator/actions?query=workflow%3Achaos).",
      "source_content_hash": "4acf0408bb04186659ad0d565d0d1dfb5586844c595283b77f802b6ea57581ba",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "現在、chaos-mesh-actionは[TiDB Operator](https://github.com/pingcap/tidb-operator)で適用されています。ワークフローにPod障害を注入することで、Operatorインスタンスの再起動を検証できます。これは、TiDB OperatorのPodが注入された障害によってランダムに削除された場合でも、TiDB Operatorが正常に動作することを確認するためです。詳細については、[TiDB Operatorワークフローページ](https://github.com/pingcap/tidb-operator/actions?query=workflow%3Achaos)を参照してください。"
      }
    },
    {
      "segment_id": "e29bd639",
      "source_content": "In the future, chaos-mesh-action will be applied in more TiDB tests to ensure the stability of TiDB and its components. Your are welcome to use chaos-mesh-action to create your own workflow.",
      "source_content_hash": "67d91308ad00b644c17b289277eb360df48923f5f839b385637f35d66dca329c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "将来的には、chaos-mesh-actionはさらに多くのTiDBテストに適用され、TiDBとそのコンポーネントの安定性を確保します。chaos-mesh-actionを使用して独自のワークフローを作成することも歓迎します。"
      }
    },
    {
      "segment_id": "e5821418",
      "source_content": "If you find any issue in chaos-mesh-action, or find any information is missing, you are welcome to create an [GitHub issue](https://github.com/pingcap/chaos-mesh/issues) or a [pull request (PR)](https://github.com/chaos-mesh/chaos-mesh/pulls) in the Chaos Mesh repository. You can also join our slack channel [#project-chaos-mesh](https://slack.cncf.io/) in the [CNCF](https://www.cncf.io/) workspace.",
      "source_content_hash": "51480ccffba9e706a58ad8be9df2d5df5d0dad6bf266ad4ee9daa7f912e6408c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "chaos-mesh-actionで問題を発見したり、情報が不足していると思われる場合は、[GitHub issue](https://github.com/pingcap/chaos-mesh/issues)を作成するか、Chaos Meshリポジトリに[プルリクエスト (PR)](https://github.com/chaos-mesh/chaos-mesh/pulls)を送信してください。[CNCF](https://www.cncf.io/)ワークスペースのSlackチャンネル[#project-chaos-mesh](https://slack.cncf.io/)にも参加できます。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/current/integrate-chaos-mesh-into-github-actions.md",
  "last_updated_timestamp": "2025-06-05T17:50:36.652783+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "ja": "6006040d1a814d5e6d8c55f53db0d22b5529085c4622f8d39ec58e4d263f1015"
  }
}
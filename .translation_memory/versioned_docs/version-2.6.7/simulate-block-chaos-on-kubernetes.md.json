{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-2.6.7/simulate-block-chaos-on-kubernetes.md",
  "source_file_content_hash": "78101516d667f43d1791977707643ba6acb4f4b73ccd7d21083a2349e09cc196",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\ntitle: Simulate Block Device Incidents\n---",
      "source_content_hash": "96948d2448b8402af49d241a8c9ec76e02d7ff520e4c4dbc9a1dd50df244babc",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "ja": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "f85bbfb4",
      "source_content": "## BlockChaos Introduction",
      "source_content_hash": "b4d9911ecc8cae2965ab82f9a9b8f1a1e72654cee651ca65da166662471dedcf",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "ja": "## BlockChaosの概要"
      }
    },
    {
      "segment_id": "6ef78e84",
      "source_content": "Chaos Mesh provides the BlockChaos experiment type. You can use this experiment type to simulate a block device latency or freeze scenario. This document describes how to install the dependencies of a BlockChaos experiment, and create a BlockChaos.",
      "source_content_hash": "50960e0bba50554f313b55e30285d0919ce5d7da10eef1945707f434a542be1d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "Chaos MeshはBlockChaos実験タイプを提供しています。この実験タイプを使用して、ブロックデバイスの遅延やフリーズのシナリオをシミュレートできます。このドキュメントでは、BlockChaos実験の依存関係のインストール方法とBlockChaosの作成方法について説明します。"
      }
    },
    {
      "segment_id": "0d5e1c45",
      "source_content": ":::note\n\nBlockChaos is in an early stage. The installation and configuration experience of it will continue to improve. If you find any issues, please open an issue in [chaos-mesh/chaos-mesh](https://github.com/chaos-mesh/chaos-mesh) to report.\n\n:::",
      "source_content_hash": "8a4a93dd2146c621a8e3e337fbcdf1a26ffb7f369aea58988407e1e08146f31c",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "ja": ":::note\n\nBlockChaosは初期段階です。インストールと設定の体験は継続的に改善されます。問題が見つかった場合は、[chaos-mesh/chaos-mesh](https://github.com/chaos-mesh/chaos-mesh)でイシューを開いて報告してください。\n\n:::"
      }
    },
    {
      "segment_id": "ac44a45c",
      "source_content": ":::note\n\nBlockChaos `freeze` action will affect all processes using the block device, not only the target container.\n\n:::",
      "source_content_hash": "428b1e2d78755d73e46ebbd65405dfd450833ae65911dd423f16c980adad2284",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "ja": ":::note\n\nBlockChaosの`freeze`アクションは、ブロックデバイスを使用するすべてのプロセスに影響を与えます。対象のコンテナだけではありません。\n\n:::"
      }
    },
    {
      "segment_id": "418617bd",
      "source_content": "## Install kernel module",
      "source_content_hash": "0b66e15c8d207f9affa1efa66376a49456b6b8d6b80533e4ce6efe1ff2c26110",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "ja": "## カーネルモジュールのインストール"
      }
    },
    {
      "segment_id": "2fdadb08",
      "source_content": "BlockChaos `delay` action depends on the [chaos-driver](https://github.com/chaos-mesh/chaos-driver) kernel module. It can only be injected on a machine with this module installed. Currently, you have to compile and install the module manually.",
      "source_content_hash": "0664c1de5ece713e432db0ef84f4648bdea30e89d42f21812ffff6b439bb9943",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "BlockChaosの`delay`アクションは[chaos-driver](https://github.com/chaos-mesh/chaos-driver)カーネルモジュールに依存しています。このモジュールがインストールされたマシンでのみ注入できます。現在のところ、このモジュールを手動でコンパイルしてインストールする必要があります。"
      }
    },
    {
      "segment_id": "44d89370",
      "source_content": "1. Download the source code of this module using the following command:\n\n   ```bash\n   curl -fsSL -o chaos-driver-v0.2.1.tar.gz https://github.com/chaos-mesh/chaos-driver/archive/refs/tags/v0.2.1.tar.gz\n   ```\n\n2. Uncompress the `chaos-driver-v0.2.1.tar.gz` file:\n\n   ```bash\n   tar xvf chaos-driver-v0.2.1.tar.gz\n   ```\n\n3. Prepare the headers of your current kernel. If you are using CentOS/Fedora, you can install the kernel headers with `yum`:\n\n   ```bash\n   yum install kernel-devel-$(uname -r)\n   ```\n\n   If you are using Ubuntu/Debian, you can install the kernel headers with `apt`:\n\n   ```bash\n   apt install linux-headers-$(uname -r)\n   ```\n\n4. Compile the module:\n\n   ```bash\n   cd chaos-driver-v0.2.1\n   make driver/chaos_driver.ko\n   ```\n\n5. Install the kernel module:\n\n   ```bash\n   insmod ./driver/chaos_driver.ko\n   ```",
      "source_content_hash": "5d465577bc26f3c070ac42db365f7eba91510870fe29888c9bb86987e5f5acd5",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "ja": "1. 以下のコマンドを使用してモジュールのソースコードをダウンロードします:\n\n   ```bash\n   curl -fsSL -o chaos-driver-v0.2.1.tar.gz https://github.com/chaos-mesh/chaos-driver/archive/refs/tags/v0.2.1.tar.gz\n   ```\n\n2. `chaos-driver-v0.2.1.tar.gz`ファイルを解凍します:\n\n   ```bash\n   tar xvf chaos-driver-v0.2.1.tar.gz\n   ```\n\n3. 現在のカーネルのヘッダーを準備します。CentOS/Fedoraを使用している場合は、`yum`でカーネルヘッダーをインストールできます:\n\n   ```bash\n   yum install kernel-devel-$(uname -r)\n   ```\n\n   Ubuntu/Debianを使用している場合は、`apt`でカーネルヘッダーをインストールできます:\n\n   ```bash\n   apt install linux-headers-$(uname -r)\n   ```\n\n4. モジュールをコンパイルします:\n\n   ```bash\n   cd chaos-driver-v0.2.1\n   make driver/chaos_driver.ko\n   ```\n\n5. カーネルモジュールをインストールします:\n\n   ```bash\n   insmod ./driver/chaos_driver.ko\n   ```"
      }
    },
    {
      "segment_id": "6ea4c715",
      "source_content": "The `chaos_driver` module has to be installed every time after rebooting. To load the module automatically, you can copy the module to a subdirectory in `/lib/modules/$(uname -r)/kernel/drivers`, run `depmod -a`, and then add `chaos_driver` to the `/etc/modules`.",
      "source_content_hash": "3f42d587277fb69fef94a5173ac4b98696ce4295ceac102153abacbc6587ca01",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "`chaos_driver`モジュールは再起動するたびにインストールする必要があります。モジュールを自動的にロードするには、モジュールを`/lib/modules/$(uname -r)/kernel/drivers`のサブディレクトリにコピーし、`depmod -a`を実行してから、`/etc/modules`に`chaos_driver`を追加します。"
      }
    },
    {
      "segment_id": "79ad944d",
      "source_content": "If you have upgraded the kernel, the module should be recompiled.",
      "source_content_hash": "f3ea2e856e7457f509918bfea2a5761997e2aa426be2a3fd2d508127c3ae714c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "カーネルをアップグレードした場合は、モジュールを再コンパイルする必要があります。"
      }
    },
    {
      "segment_id": "e0724a69",
      "source_content": ":::note\n\nIt is recommended to use DKMS or akmod for automatic kernel module compiling or loading. If you want to help us improve the installation experience, creating a DKMS or akmod package and submitting it to different distribution repositories is very welcome.\n\n:::",
      "source_content_hash": "e60069bb7da9b4e5fa2d071c2a5c781b503f9539c3af9a0e4d5cc02e157c5931",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "ja": ":::note\n\n自動的なカーネルモジュールのコンパイルやロードにはDKMSやakmodの使用が推奨されます。インストール体験を改善するために、DKMSやakmodパッケージを作成してさまざまなディストリビューションのリポジトリに提出することは大歓迎です。\n\n:::"
      }
    },
    {
      "segment_id": "047c2395",
      "source_content": "## Create experiments using the YAML file",
      "source_content_hash": "faa2dfd18ffbf305fc181947e20275b109e0d8b3b79c0d1ec685d272ffea7041",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "ja": "## YAMLファイルを使用した実験の作成"
      }
    },
    {
      "segment_id": "c7436e69",
      "source_content": "1. Write the experiment configuration to the YAML configuration file. The following uses the `block-latency.yaml` file as an example.\n\n   ```yaml\n   apiVersion: chaos-mesh.org/v1alpha1\n   kind: BlockChaos\n   metadata:\n     name: hostpath-example-delay\n   spec:\n     selector:\n       labelSelectors:\n         app: hostpath-example\n     mode: all\n     volumeName: hostpath-example\n     action: delay\n     delay:\n       latency: 1s\n   ```\n\n   :::note\n\n   Only hostpath or localvolume is supported.\n\n   :::\n\n2. Use `kubectl` to create an experiment:\n\n   ```bash\n   kubectl apply -f block-latency.yaml\n   ```",
      "source_content_hash": "9f9f12f6b59e09296fab31d1e279dc66d63284eada61bcc72321dcae0390ef13",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "ja": "1. 実験設定をYAML設定ファイルに記述します。以下の例では`block-latency.yaml`ファイルを使用しています。\n\n   ```yaml\n   apiVersion: chaos-mesh.org/v1alpha1\n   kind: BlockChaos\n   metadata:\n     name: hostpath-example-delay\n   spec:\n     selector:\n       labelSelectors:\n         app: hostpath-example\n     mode: all\n     volumeName: hostpath-example\n     action: delay\n     delay:\n       latency: 1s\n   ```\n\n   :::note\n\n   hostpathまたはlocalvolumeのみがサポートされています。\n\n   :::\n\n2. `kubectl`を使用して実験を作成します:\n\n   ```bash\n   kubectl apply -f block-latency.yaml\n   ```"
      }
    },
    {
      "segment_id": "a2c0166e",
      "source_content": "You can find the following magic happened:",
      "source_content_hash": "89bb3ef780a5d248de2215659626c1f4c105256cff1888fbd5b6b296714c3999",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "以下のような魔法が起こります:"
      }
    },
    {
      "segment_id": "cd1d0fe2",
      "source_content": "1. The elevator of the volume is changed to `ioem` or `ioem-mq`. You can check it through `cat /sys/block/<device>/queue/scheduler`.\n2. The `ioem` or `ioem-mq` scheduler will receive the latency request and delay the request for the specified time.",
      "source_content_hash": "2c41811f4090c8b48fbcc4eaf1a2cde34f6ff75f8d948dc047ef6a7bb55e53a5",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "ja": "1. ボリュームのエレベーターが`ioem`または`ioem-mq`に変更されます。`cat /sys/block/<device>/queue/scheduler`で確認できます。\n2. `ioem`または`ioem-mq`スケジューラは遅延リクエストを受け取り、指定された時間だけリクエストを遅延させます。"
      }
    },
    {
      "segment_id": "0e80209e",
      "source_content": "The fields in the YAML configuration file are described in the following table:",
      "source_content_hash": "fa3892015f9668c8ee2dbae8e78ed9f9cebbd20143bb72a3e28f37e924ce1938",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "YAML設定ファイルのフィールドは以下の表で説明されています:"
      }
    },
    {
      "segment_id": "6206f46b",
      "source_content": "| Parameter | Type | Note | Default value | Required | Example |\n| --- | --- | --- | --- | --- | --- |\n| `mode` | string | Specifies the mode of the experiment. The mode options include `one` (selecting a random Pod), `all` (selecting all eligible Pods), `fixed` (selecting a specified number of eligible Pods), `fixed-percent` (selecting a specified percentage of Pods from the eligible Pods), and `random-max-percent` (selecting the maximum percentage of Pods from the eligible Pods). | None | Yes | `one` |\n| `value` | string | Provides parameters for the `mode` configuration, depending on `mode`. For example, when `mode` is set to `fixed-percent`, `value` specifies the percentage of Pods. | None | No | `1` |\n| `selector` | struct | Specifies the target Pod. For details, refer to [Define the experiment scope](./define-chaos-experiment-scope.md). | None | Yes |  |\n| `volumeName` | string | Specifies the volume to inject in the target pods. There should be a corresponding entry in the pods' `.spec.volumes`. | None | Yes | `hostpath-example` |\n| `action` | string | Indicates the specific type of faults. The available fault types include `delay` and `freeze`. `delay` will simulate the latency of block devices, and `freeze` will simulate that the block device cannot handle any requests | None | Yes | `delay` |\n| `delay.latency` | string | Specifies the latency of the block device. | None | Yes (if `action` is `delay`) | `500ms` |",
      "source_content_hash": "85841b55e26413ec55bd81715fd3d284fdcd66a4a80f6e9055a97c09633e021e",
      "node_type": "table",
      "translatable": false,
      "translations": {
        "ja": "@@untranslatable_placeholder_6206f46b"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-2.6.7/simulate-block-chaos-on-kubernetes.md",
  "last_updated_timestamp": "2025-06-05T17:50:36.683585+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "ja": "78101516d667f43d1791977707643ba6acb4f4b73ccd7d21083a2349e09cc196"
  }
}